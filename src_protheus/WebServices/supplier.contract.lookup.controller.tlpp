#include 'tlpp-core.th'

#DEFINE ERRO_HTTP 400

namespace tdi.sigacom.supplier.lookup
using namespace totvs.protheus.backoffice.reconciliation.util
using namespace tdi.sigacom.supplier.errorhandler


/*/{Protheus.doc} LookupController
  WS para consultar os dados de um lookup no Protheus.

  @author Tiago Cunha
  @since 10/04/2025
  @version 1.0.0
/*/
class LookupController

	public method new() constructor

	@get(endpoint='/api/tdi/com/supplier/lookup/:ctabela')
	public method getLookup()

	@get(endpoint='/api/tdi/com/supplier/lookup/:ctabela/:id')
	public method getLookupById()

endClass

method new() class LookupController
return self

method getLookup(cId as character) class LookupController

	local jResposta     as json
	local nPage         as numeric
	local nPageSize     as numeric
	local cFilter       as character
	local aIndex        as array
	local aAuxIndexs    as array
	local lResponse     as logical
	local cChaveRes     as character
	local cResponse     as character
	local jPath         as Json
	local cTableAlias   as character
	local oError        as object
	local oErrorHandler	as object
	local nX            as numeric

	default cId := ''

	Try
		jResposta    := JsonObject():new()
		nPage        := 1
		nPageSize    := 10
		cFilter      := ''
		aIndex       := {}
		aAuxIndexs   := {}
		lResponse    := .F.
		nX           := 0
		cChaveRes    := "message"
		cResponse    := "Resposta inválida."
		jPath        := oRest:getPathParamsRequest()
		cTableAlias  := Upper(jPath['ctabela'])
		oError			 := ErrorClass():New()

		// tenta recuperar a partir da SX3
		aStruct := FWSX3Util():getListFieldsStruct(cTableAlias, .T.)

		// caso contrário pega a estrutura da temporária
		if (len(aStruct) == 0 .AND. select(cTableAlias) > 0)
			aStruct := (cTableAlias)->(dbStruct())
		endIf

		// verifica se encontrou
		if (len(aStruct) > 0)
			tcGetHeaders()
			tcGetPageAndPageSize(@nPage, @nPageSize)

			// pegando o filtro
			If (oRest:getQueryRequest():GetJsonText("filter") != "null")
				cFilter := AllTrim(oRest:getQueryRequest():GetJsonText("filter"))
			EndIf

			// pegando os indexes usados na busca do F3
			If (oRest:getQueryRequest():GetJsonText("idx") != "null")
				cIndex := '{"idx":' + Upper(AllTrim(oRest:getQueryRequest():GetJsonText("idx"))) + '}'
				JIndex := JsonObject():new()
				JIndex:fromJson(cIndex)
				aIndexs := JIndex:GetJsonObject("idx")
			EndIf


			// pega os filtros avançados
			If (oRest:getQueryRequest():GetJsonText("filterAdvanced") != "null")
				cFilter := AllTrim(oRest:getQueryRequest():GetJsonText("filterAdvanced"))
			EndIf


			// Pecorre o aIndexs e verifica se o campo não é virtual
			aAuxIndexs := {}
			for nX := 1 to len(aIndexs)
				if !getSX3Cache(aIndexs[nX], 'X3_CONTEXT') == 'V'
					aAdd(aAuxIndexs, aIndexs[nX])
				endif
			next

			if len(aAuxIndexs) > 0
				aIndexs := aAuxIndexs
			endif

			oService := LookupService():new()
			oService:GetData(nPage, nPageSize, cTableAlias, aIndexs, URLDecode(cFilter), URLDecode(cId))

			IIf(oService:oAdapterBase:lOk,;
				jResponse := oService:oAdapterBase:getJSONResponse(),;
				jResponse := SetRestFault(oService:oAdapterBase:GetCode(), oService:oAdapterBase:getMessage()))

			jResposta:fromJson(jResponse)

			If ValType(jResposta:GetJsonObject("items")) <> "U"

				// Verifica se o cid foi informado caso foi informado deve mandar outro json apenas com o resultado
				If !Empty(cId)
					jResp := JsonObject():new()

					if len(jResposta:GetJsonObject("items")) > 0
						jResp := jResposta:GetJsonObject("items")[1]
					endif

					oRest:setKeyHeaderResponse("Content-Type", "application/json")
					oRest:setResponse(jResp)
				else
					fields               := oService:Fields
					jResposta["columns"] := fields

					tcAnswerRest(jResposta, .T.)
				endif

			Else
				tcSetResponse(lResponse, cChaveRes, cResponse, .F.)
			endIf

			oService:oAdapterBase:DeActivate()
			FreeObj(oService)
		else
			oError:description := 'alias "' + cTableAlias + '" inexistente'
			oError:errorstack  := 'alias "' + cTableAlias + '" inexistente'
			Throw oError
		endIf

	Catch error
		cError                 := error:errorstack
		oErrorHandler          := ErrorHandler():new()
		oErrorHandler:cCode    := 'request_error'
		oErrorHandler:cMessage := 'Erro ao processar a requisição.'

		oErrorHandler:addDetail(oErrorHandler:cCode, error:description, cError)

		oRest:setKeyHeaderResponse('Content-Type','application/json')
		oRest:setFault(oErrorHandler:getJSON())
		FreeObj(oErrorHandler)
	endtry
Return


method getLookupById() class LookupController
	Local cId := oRest:getPathParamsRequest()["id"] as Character
	::getLookup(cId)
return