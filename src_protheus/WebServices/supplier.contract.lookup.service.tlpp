#include 'tlpp-core.th'

#DEFINE ERRO_HTTP 400

namespace tdi.sigacom.supplier.lookup
using namespace totvs.protheus.backoffice.reconciliation.util


/*/{Protheus.doc} LookupService
  Classe LookupService

  @author Tiago Cunha
  @since 10/04/2025
  @version 1.0.0
/*/
class LookupService

	public data oAdapterBase as Object
    public data fields as json

	public method new() constructor
	public method GetData()


end class

method new() class LookupService
	Self:oAdapterBase := FWAdapterBaseV2():new("GET", .T.)
return self

method GetData(nPage As Numeric, nPageSize As Numeric, cTable as character, aIndexs as Array, cFilter as character, cId as character) class LookupService

	Local aArea
	Local cWhere
  Local nX := 1

	aArea   := FwGetArea()

	Self:oAdapterBase:setPage(nPage)
	Self:oAdapterBase:setPageSize(nPageSize)

	AddMapFields(self, cTable)
	Self:oAdapterBase:SetQuery( GetQuery(cTable) )

  if !Empty(cFilter) .Or. !Empty(cId)


    if cTable == "SC2" // Tratamento
      cNum    := Substring(AllTrim(cFilter), 1, TAMSX3("C2_NUM")[1])
	    cItem   := Substring(AllTrim(cFilter), TAMSX3("C2_NUM")[1] + 1, TAMSX3("C2_ITEM")[1])
	    cSequen := Substring(AllTrim(cFilter), TAMSX3("C2_NUM")[1] + TAMSX3("C2_ITEM")[1] + 1, TAMSX3("C2_SEQUEN")[1])
      cProduto := allTrim(Padr(Upper(cFilter), TamSx3("C2_PRODUTO")[1]))

      cWhere := " SC2.D_E_L_E_T_ = ' ' AND ((SC2.C2_NUM = '" + cNum + "' AND SC2.C2_ITEM = '" + cItem + "' AND SC2.C2_SEQUEN = '" + cSequen + "') OR SC2.C2_NUM = '" + cNum + "' OR C2_PRODUTO LIKE '%" + cProduto + "%')"
    else
      cWhere := " " + cTable + ".D_E_L_E_T_ = ' ' "

			if len(aIndexs) > 0
				cWhere += "AND ("
				
				for nx := 1 to len(aIndexs)
					if nx > 1
					cWhere += " OR "
					endif

					_cFiltr := allTrim(Padr(Upper(cFilter), TamSx3(aIndexs[nx])[1]))

					// Se o cId for diferente de vazio, filtra pelo cId igualdade
					if !Empty(cId)
						cWhere += " UPPER(" + cTable + "." + aIndexs[nx] + ") = '" + Upper(cId) + "' "
					else
					 // Se o cId for vazio, filtra pelo cId LIKE
					 cWhere += " UPPER(" + cTable + "." + aIndexs[nx] + ") LIKE '%" + Upper(_cFiltr) + "%' "
					endIf
				next

				cWhere += ")"
			endif
    endif
  else
    cWhere := " " + cTable + ".D_E_L_E_T_ = ' ' "
  endif

  // if cTable == "SB1"
  //   cWhere += " AND SB1.B1_TIPO IN ('PA', 'PI')"
  // endif

	Self:oAdapterBase:SetWhere( cWhere )

	if len(aIndexs) > 0
		Self:oAdapterBase:SetOrder(aIndexs[1])
	endif

	If Self:oAdapterBase:Execute()
		Self:oAdapterBase:FillGetResponse()
	EndIf

	FwrestArea(aArea)
return

Static Function AddMapFields( oSelf As Object, cTable As Character )
	Local nI := 1
	Local cField    := "" as character
	Local aAllFields:= FWSX3Util():GetAllFields(cTable, .F.) as array
	Local aFieldSX3 := {} as Array
	Local aStruct   := {} as Array
  Local aFields   := {} as Array
	Local cTitulo   := "" as character

	For nI := 1 To Len(aAllFields)
		cField  := aAllFields[nI]
		aStruct := FWSX3Util():GetFieldStruct(cField, .F.)

		cTitulo := AllTrim(FWX3Titulo(cField))

    if GetSx3Cache(cField, "X3_BROWSE") == "S" .Or. cField $ "_FILIAL"
      aAdd(aFieldSX3,{GetSx3Cache(cField, "X3_ORDEM"),;
        AllTrim(Upper(cField)),;
        AllTrim(If(Empty(cTitulo), Upper(cField), cTitulo)),;
        aStruct[2],;
        aStruct[3],;
        aStruct[4],;
        AllTrim(X3Picture(cField)),""})

        oField := JsonObject():New()
        oField["field"] := AllTrim(Upper(cField))
        oField["title"] := AllTrim(GetSx3Cache(cField, "X3_TITULO"))

        if aStruct[2] == "N"
          oField["type"] := 'number'
        elseif aStruct[2] == "D"
          oField["type"] := 'date'
        elseif aStruct[2] == "C"
          oField["type"] := 'string'
        elseif aStruct[2] == "L"
					oField["type"] := 'boolean'
        else
          oField["type"] := aStruct[2]
        endIf

        aAdd(aFields, oField)
    endif
	Next

  oSelf:Fields := aFields

	For nI := 1 To Len(aFieldSX3)
		cField := Upper(aFieldSX3[nI][2])
		oSelf:oAdapterBase:addMapFields(cField, cField, .T., .F., {cField, aFieldSX3[nI][4], aFieldSX3[nI][5], aFieldSX3[nI][6]}, cField)
	Next nI

	// Adiciona o Recno
	// oSelf:AddMapFields(Lower('RECNO'), 'R_E_C_N_O_',.T.,.T.,{'R_E_C_N_O_', 'N', ,0},"")

Return

Static Function GetQuery(cTable as character)
	Local cQuery AS CHARACTER

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName( cTable ) + " " + cTable
	cQuery += " WHERE #QueryWhere#"

Return cQuery