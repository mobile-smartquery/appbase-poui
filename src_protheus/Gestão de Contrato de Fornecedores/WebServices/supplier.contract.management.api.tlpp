#include "tlpp-core.th"
#include "tlpp-rest.th"
#Include "TOTVS.CH"
#Include "Protheus.ch"
#INCLUDE "TRYEXCEPTION.CH"
#INCLUDE "PARMTYPE.CH"
#INCLUDE "TOPCONN.CH"
namespace tdi.sigacom.supplier.contract.api
using namespace tdi.sigacom.supplier.contract.util

/*/{Protheus.doc} TdiCOMPrePurchaseOrder()
    Classe responsavel por receber as requisicoes de Grupo de Produto
    @type Class
    @author Cassio Menabue Lima
    @since 20/09/2024
    @version 1.0
/*/
Class TdiComSupplierContractApi from LongNameClass

	public data oUtil
	public data  jBody               as object
	public data  jParams             as object
	public data  jPathParams         as object
	public data  cPage               as Character
	public data  cPageSize           as Character
	public data  cFilter             as Character

	public method New()


	@get("/api/tdi/com/supplier/contract/px2")
	public method getPX2()
	@get("/api/tdi/com/supplier/contract/px3")
	public method getPX3()
	@get("/api/tdi/com/supplier/contract/px4")
	public method getPX4()
	@get("/api/tdi/com/supplier/contract/px7")
	public method getPX7()
	@get("/api/tdi/com/supplier/contract/portal/px2")
	public method getPPX2()
	//Apis para F3's
	//@get("/api/tdi/com/supplier/contract/f3/users")
	//public method getUsers()
	//@get("/api/tdi/com/supplier/contract/f3/risk")
	//public method getRisk()
	//@get("/api/tdi/com/supplier/contract/f3/segments")
	//public method getSegments()
	//@get("/api/tdi/com/supplier/contract/f3/status")
	//public method getStatus()
	//@get("/api/tdi/com/supplier/contract/f3/paymentconditions")
	//public method getPaymentConditions()
	//@get("/api/tdi/com/supplier/contract/f3/adjustmentindex")
	//public method getAdjustmentIndex()
	//@get("/api/tdi/com/supplier/contract/f3/typeofrenewal")
	//public method getTypeOfRenewal()
	//@get("/api/tdi/com/supplier/contract/f3/renewalstatus")
	//public method getRenewalStatus()
	//@get("/api/tdi/com/supplier/contract/f3/renewaltype")
	//public method getRenewalType()
	//@get("/api/tdi/com/supplier/contract/f3/renewalperiodicity")
	//public method getRenewalPeriodicity()
	//@get("/api/tdi/com/supplier/contract/f3/Reasonforblocking")
	//public method getReasonForBlocking()
	//@get("/api/tdi/com/supplier/contract/f3/suppliers")
	//public method getSuppliers()
	//@get("/api/tdi/com/supplier/contract/f3/products")
	//public method getProducts()
	//@get("/api/tdi/com/supplier/contract/f3/costcenters")
	//public method getCostCenters()
	//@get("/api/tdi/com/supplier/contract/f3/accountingitems")
	//public method getAccountingItems()
	//@get("/api/tdi/com/supplier/contract/f3/accountingclass")
	//public method getAccountingClass()
	//@get("/api/tdi/com/supplier/contract/f3/valuetype")
	//public method getValueType()
	//@get("/api/tdi/com/supplier/contract/f3/periodicities")
	//public method getPeriodicities()
	//@get("/api/tdi/com/supplier/contract/f3/companies")
	//public method getCompanies()
	//@get("/api/tdi/com/supplier/contract/f3/branches")
	//public method getBranches()

EndClass
EndClass

/*/{Protheus.doc} New()
    Metodo responsavel por instanciar a classe e iniciar variaveis
    @type Method
    @author Matheus Gratão D'Ávila
    @since 04/06/2025
    @version 1.0
/*/
Method New() class TdiComSupplierContractApi
	::oUtil :=  tdi.sigacom.supplier.contract.util.TdiComSupplierContractUtil():new()
	::jParams   := JsonObject():New()
	::jPathParams:= JsonObject():New()
Return Self
/*/{Protheus.doc} getPX2()
    Metodo responsavel por retornar os dados da tabela Contrato de Fornecedores
    @type Method
    @author Matheus Gratão D'Ávila
    @since 04/06/2025
    @version 1.0
/*/
Method getPX2() class TdiComSupplierContractApi
	Local nx
	Local aFields		:={}
	Local cQuery     	:= ""
	Local cWhere		:= ""
	Local lRet         	:= .T.
	Local oResponse    	:= JsonObject():New()
	Local cErroBlk
	Local oException   	:= ErrorBlock({|e| cErroBlk := e:Description + e:ErrorStack, lRet := .F., Break(e) })
	Local oDataBase		:= Nil
	Local jQuery       	:= oRest:getQueryRequest()
	local cFields      	:= If(Empty(jQuery['fields']), Self:oUtil:GetFieldsTable("PX2"), jQuery['fields'])
	Local cFilter      	:= If(Empty(jQuery['filter']), '', jQuery['filter'])
	Local cPage        	:= If(Empty(jQuery['page']), '1', jQuery['page'])
	Local cPageSize    	:= If(Empty(jQuery['pageSize']), '50', jQuery['pageSize'])
	Local cOrder       	:= If(Empty(jQuery['order']), '', jQuery['order'])

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	Begin Sequence

		oDataBase := FWAdapterBaseV2():new( 'GET', .T. )
		oDataBase:setPage(Val(cPage))
		oDataBase:setPageSize(Val(cPageSize))
		oDataBase:SetOrderQuery(cOrder)
		oDataBase:SetUrlFilter({{'FILTER', cFilter}})
		oDataBase:SetFields( cFields )

		// Mapa de campos retornaveis
		aFields := StrToKArr2(cFields, ',')

		for nx := 1 to Len(aFields)
			oDataBase:AddMapFields( aFields[nx]   , aFields[nx]  , .T., .F., { aFields[nx]  , TamSX3( aFields[nx] )[3], TamSX3( aFields[nx] )[1], 0 } )
		next

		// Dados da Query
		cQuery := " SELECT #QueryFields# "
		cQuery += " FROM " + RetSqlName('PX2') + " PX2 "
		cQuery += " WHERE #QueryWhere#"
		cWhere := " PX2_FILIAL = '"+ FWxFilial('PX2') +"' AND PX2.D_E_L_E_T_ = ' '"

		oDataBase:SetQuery( cQuery )
		oDataBase:SetWhere( cWhere )
		oDataBase:SetOrderQuery( cOrder )

		//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
		If oDataBase:Execute()
			// Gera o arquivo Json com o retorno da Query
			oDataBase:FillGetResponse()
		EndIf

		If oDataBase:lOk
			oRest:setResponse(oDataBase:getJSONResponse())
		Else
			lRet := .F.
			cErroBlk := 'Não foi possivel filter os registros!'
		EndIf

	End Sequence

	ErrorBlock(oException)

	If !lRet
		oResponse['code'] := 2
		oResponse['message'] := 'Aconteceu um erro inesperado no serviço!'
		oResponse['detailedMessage'] := cErroBlk
		oRest:setFault(oResponse:ToJson())
	EndIf

Return

/*/{Protheus.doc} getPX3()
    Metodo responsavel por retornar os dados da tabela Itens de Contrato
    @type Method
    @author Matheus Gratão D'Ávila
    @since 04/06/2025
    @version 1.0
/*/
Method getPX3() class TdiComSupplierContractApi
	Local nx
	Local aFields		:={}
	Local cQuery     	:= ""
	Local cWhere		:= ""
	Local lRet         	:= .T.
	Local oResponse    	:= JsonObject():New()
	Local cErroBlk
	Local oException   	:= ErrorBlock({|e| cErroBlk := e:Description + e:ErrorStack, lRet := .F., Break(e) })
	Local oDataBase		:= Nil
	Local jQuery       	:= oRest:getQueryRequest()
	local cFields      	:= If(Empty(jQuery['fields']), Self:oUtil:GetFieldsTable("PX3"), jQuery['fields'])
	Local cFilter      	:= If(Empty(jQuery['filter']), '', jQuery['filter'])
	Local cPage        	:= If(Empty(jQuery['page']), '1', jQuery['page'])
	Local cPageSize    	:= If(Empty(jQuery['pageSize']), '50', jQuery['pageSize'])
	Local cOrder       	:= If(Empty(jQuery['order']), '', jQuery['order'])

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	Begin Sequence

		oDataBase := FWAdapterBaseV2():new( 'GET', .T. )
		oDataBase:setPage(Val(cPage))
		oDataBase:setPageSize(Val(cPageSize))
		oDataBase:SetOrderQuery(cOrder)
		oDataBase:SetUrlFilter({{'FILTER', cFilter}})
		oDataBase:SetFields( cFields )

		// Mapa de campos retornaveis
		aFields := StrToKArr2(cFields, ',')

		for nx := 1 to Len(aFields)
			oDataBase:AddMapFields( aFields[nx]   , aFields[nx]  , .T., .F., { aFields[nx]  , TamSX3( aFields[nx] )[3], TamSX3( aFields[nx] )[1], 0 } )
		next

		// Dados da Query
		cQuery := " SELECT #QueryFields# "
		cQuery += " FROM " + RetSqlName('PX3') + " PX3 "
		cQuery += " WHERE #QueryWhere#"
		cWhere := " PX3_FILIAL = '"+ FWxFilial('PX3') +"' AND PX3.D_E_L_E_T_ = ' '"

		oDataBase:SetQuery( cQuery )
		oDataBase:SetWhere( cWhere )
		oDataBase:SetOrderQuery( cOrder )

		//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
		If oDataBase:Execute()
			// Gera o arquivo Json com o retorno da Query
			oDataBase:FillGetResponse()
		EndIf

		If oDataBase:lOk
			oRest:setResponse(oDataBase:getJSONResponse())
		Else
			lRet := .F.
			cErroBlk := 'Não foi possivel filter os registros!'
		EndIf

	End Sequence

	ErrorBlock(oException)

	If !lRet
		oResponse['code'] := 2
		oResponse['message'] := 'Aconteceu um erro inesperado no serviço!'
		oResponse['detailedMessage'] := cErroBlk
		oRest:setFault(oResponse:ToJson())
	EndIf

Return

/*/{Protheus.doc} getPX4()
    Metodo responsavel por retornar os dados da tabela Empresas Pagadoras
    @type Method
    @author Matheus Gratão D'Ávila
    @since 04/06/2025
    @version 1.0
/*/
Method getPX4() class TdiComSupplierContractApi
	Local nx
	Local aFields		:={}
	Local cQuery     	:= ""
	Local cWhere		:= ""
	Local lRet         	:= .T.
	Local oResponse    	:= JsonObject():New()
	Local cErroBlk
	Local oException   	:= ErrorBlock({|e| cErroBlk := e:Description + e:ErrorStack, lRet := .F., Break(e) })
	Local oDataBase		:= Nil
	Local jQuery       	:= oRest:getQueryRequest()
	local cFields      	:= If(Empty(jQuery['fields']), Self:oUtil:GetFieldsTable("PX4"), jQuery['fields'])
	Local cFilter      	:= If(Empty(jQuery['filter']), '', jQuery['filter'])
	Local cPage        	:= If(Empty(jQuery['page']), '1', jQuery['page'])
	Local cPageSize    	:= If(Empty(jQuery['pageSize']), '50', jQuery['pageSize'])
	Local cOrder       	:= If(Empty(jQuery['order']), '', jQuery['order'])

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	Begin Sequence

		oDataBase := FWAdapterBaseV2():new( 'GET', .T. )
		oDataBase:setPage(Val(cPage))
		oDataBase:setPageSize(Val(cPageSize))
		oDataBase:SetOrderQuery(cOrder)
		oDataBase:SetUrlFilter({{'FILTER', cFilter}})
		oDataBase:SetFields( cFields )

		// Mapa de campos retornaveis
		aFields := StrToKArr2(cFields, ',')

		for nx := 1 to Len(aFields)
			oDataBase:AddMapFields( aFields[nx]   , aFields[nx]  , .T., .F., { aFields[nx]  , TamSX3( aFields[nx] )[3], TamSX3( aFields[nx] )[1], 0 } )
		next

		// Dados da Query
		cQuery := " SELECT #QueryFields# "
		cQuery += " FROM " + RetSqlName('PX4') + " PX4 "
		cQuery += " WHERE #QueryWhere#"
		cWhere := " PX4_FILIAL = '"+ FWxFilial('PX4') +"' AND PX4.D_E_L_E_T_ = ' '"

		oDataBase:SetQuery( cQuery )
		oDataBase:SetWhere( cWhere )
		oDataBase:SetOrderQuery( cOrder )

		//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
		If oDataBase:Execute()
			// Gera o arquivo Json com o retorno da Query
			oDataBase:FillGetResponse()
		EndIf

		If oDataBase:lOk
			oRest:setResponse(oDataBase:getJSONResponse())
		Else
			lRet := .F.
			cErroBlk := 'Não foi possivel filter os registros!'
		EndIf

	End Sequence

	ErrorBlock(oException)

	If !lRet
		oResponse['code'] := 2
		oResponse['message'] := 'Aconteceu um erro inesperado no serviço!'
		oResponse['detailedMessage'] := cErroBlk
		oRest:setFault(oResponse:ToJson())
	EndIf

Return

/*/{Protheus.doc} getPX7()
    Metodo responsavel por retornar os dados da tabela Fornecedores do Contrato
    @type Method
    @author Matheus Gratão D'Ávila
    @since 04/06/2025
    @version 1.0
/*/
Method getPX7() class TdiComSupplierContractApi
	Local nx
	Local aFields		:={}
	Local cQuery     	:= ""
	Local cWhere		:= ""
	Local lRet         	:= .T.
	Local oResponse    	:= JsonObject():New()
	Local cErroBlk
	Local oException   	:= ErrorBlock({|e| cErroBlk := e:Description + e:ErrorStack, lRet := .F., Break(e) })
	Local oDataBase		:= Nil
	Local jQuery       	:= oRest:getQueryRequest()
	local cFields      	:= If(Empty(jQuery['fields']), Self:oUtil:GetFieldsTable("PX7"), jQuery['fields'])
	Local cFilter      	:= If(Empty(jQuery['filter']), '', jQuery['filter'])
	Local cPage        	:= If(Empty(jQuery['page']), '1', jQuery['page'])
	Local cPageSize    	:= If(Empty(jQuery['pageSize']), '50', jQuery['pageSize'])
	Local cOrder       	:= If(Empty(jQuery['order']), '', jQuery['order'])

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	Begin Sequence

		oDataBase := FWAdapterBaseV2():new( 'GET', .T. )
		oDataBase:setPage(Val(cPage))
		oDataBase:setPageSize(Val(cPageSize))
		oDataBase:SetOrderQuery(cOrder)
		oDataBase:SetUrlFilter({{'FILTER', cFilter}})
		oDataBase:SetFields( cFields )

		// Mapa de campos retornaveis
		aFields := StrToKArr2(cFields, ',')

		for nx := 1 to Len(aFields)
			oDataBase:AddMapFields( aFields[nx]   , aFields[nx]  , .T., .F., { aFields[nx]  , TamSX3( aFields[nx] )[3], TamSX3( aFields[nx] )[1], 0 } )
		next

		// Dados da Query
		cQuery := " SELECT #QueryFields# "
		cQuery += " FROM " + RetSqlName('PX7') + " PX7 "
		cQuery += " WHERE #QueryWhere#"
		cWhere := " PX7_FILIAL = '"+ FWxFilial('PX7') +"' AND PX7.D_E_L_E_T_ = ' '"

		oDataBase:SetQuery( cQuery )
		oDataBase:SetWhere( cWhere )
		oDataBase:SetOrderQuery( cOrder )

		//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
		If oDataBase:Execute()
			// Gera o arquivo Json com o retorno da Query
			oDataBase:FillGetResponse()
		EndIf

		If oDataBase:lOk
			oRest:setResponse(oDataBase:getJSONResponse())
		Else
			lRet := .F.
			cErroBlk := 'Não foi possivel filter os registros!'
		EndIf

	End Sequence

	ErrorBlock(oException)

	If !lRet
		oResponse['code'] := 2
		oResponse['message'] := 'Aconteceu um erro inesperado no serviço!'
		oResponse['detailedMessage'] := cErroBlk
		oRest:setFault(oResponse:ToJson())
	EndIf

Return



/*/{Protheus.doc} getPPX2()
    Metodo responsavel por retornar os dados das widgets da tela Dashboard
    @type Method
    @author Matheus Gratão D'Ávila
    @since 17/06/2025
    @version 1.0
/*/
Method getPPX2() class TdiComSupplierContractApi
	Local nx
	Local aFields		:={}
	Local cQuery     	:= ""
	Local cWhere		:= ""
	Local lRet         	:= .T.
	Local oResponse    	:= JsonObject():New()
	Local cErroBlk
	Local oException   	:= ErrorBlock({|e| cErroBlk := e:Description + e:ErrorStack, lRet := .F., Break(e) })
	Local oDataBase		:= Nil
	Local jQuery       	:= oRest:getQueryRequest()
	local cFields      	:= If(Empty(jQuery['fields']), Self:oUtil:GetFieldsTable("PX2"), jQuery['fields'])
	Local cFilter      	:= If(Empty(jQuery['filter']), '', jQuery['filter'])
	Local cPage        	:= If(Empty(jQuery['page']), '1', jQuery['page'])
	Local cPageSize    	:= If(Empty(jQuery['pageSize']), '50', jQuery['pageSize'])
	Local cOrder       	:= If(Empty(jQuery['order']), '', jQuery['order'])
	Local cGroup       	:= If(Empty(jQuery['group']), '', jQuery['group'])

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	Begin Sequence

		oDataBase := FWAdapterBaseV2():new( 'GET', .T. )
		oDataBase:setPage(Val(cPage))
		oDataBase:setPageSize(Val(cPageSize))
		oDataBase:SetOrderQuery(cOrder)
		oDataBase:SetUrlFilter({{'FILTER', cFilter}})
		oDataBase:SetFields( cFields )

		// Mapa de campos retornaveis
		aFields := StrToKArr2(cFields, ',')

		for nx := 1 to Len(aFields)
			oDataBase:AddMapFields( aFields[nx]   , aFields[nx]  , .T., .F., { aFields[nx]  , TamSX3( aFields[nx] )[3], TamSX3( aFields[nx] )[1], 0 } )
		next

		// Dados da Query
		cQuery := " SELECT #QueryFields# "
		cQuery += " FROM " + RetSqlName('PX2') + " PX2 "
		cQuery += " WHERE #QueryWhere#"
		cWhere := " PX2_FILIAL = '"+ FWxFilial('PX2') +"' AND PX2.D_E_L_E_T_ = ' '"
		cQuery += cWhere
		If !Empty(cGroup)
			cQuery += " GROUP BY " + cGroup
		Endif

		oDataBase:SetQuery(cQuery)
		oDataBase:SetOrderQuery(cOrder)

		//Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
		If oDataBase:Execute()
			// Gera o arquivo Json com o retorno da Query
			oDataBase:FillGetResponse()
		EndIf

		If oDataBase:lOk
			oRest:setResponse(oDataBase:getJSONResponse())
		Else
			lRet := .F.
			cErroBlk := 'Não foi possivel filter os registros!'
		EndIf

	End Sequence

	ErrorBlock(oException)

	If !lRet
		oResponse['code'] := 2
		oResponse['message'] := 'Aconteceu um erro inesperado no serviço!'
		oResponse['detailedMessage'] := cErroBlk
		oRest:setFault(oResponse:ToJson())
	EndIf

Return
